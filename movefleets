#!/usr/bin/env python
# vim: set ts=2 sw=2 expandtab:

import game
from optparse import OptionParser
import sys
import shape

def main():
  parser = OptionParser()
  parser.add_option("-U", "--username", dest="username",
                    help="username of login")
  parser.add_option("-P", "--password", dest="password",
                    help="password for login")
  parser.add_option("-n", "--noupgrade", dest="doupgrade",
                    action="store_false", default=True, help="dry run")

  parser.add_option("-s", "--source_route", dest="source",
                    type="string", help="route enclosing source")
  parser.add_option("-d", "--destination", dest="dest",
                    type="string", help="desination planet or route")

  (options, args) = parser.parse_args()

  if options.source == None or options.dest == None:
    print "not enough arguments"
    parser.print_help()
    sys.exit(1)

  print "options " + str(options)

  g=game.Galaxy()
  if options.username and options.password:
    # explicit login
    g.login(options.username, options.password, force=True)
  else:
    # try to pick up stored credentials
    g.login()

  g.load_routes()
  try:
    source_route = g.find_route(options.source)
    source_shape = shape.Polygon(*(source_route.points))
  except:
    print "could't find source route"
    sys.exit(1)

  try:
    dest_route = g.find_route(options.dest)
    destshape = shape.Polygon(*(dest_route.points))
  except:
    print "could't find dest route"
    sys.exit(1)

  MoveFleets(g, options.doupgrade, source_shape, dest_route)

def MoveFleets(g, doupgrade, source, dest):
  g.load_fleet_cache()

  for f in g.fleets:
    if source.inside(f.coords):
      #if f.disposition == "Trade":
        print "moving fleet %s" % f
        if doupgrade:
          success = f.move_to_route(dest)
  
  g.write_fleet_cache()

if __name__ == "__main__":
    main()
